install.packages("rpart")
x <- 2
install.packages("plyr", dependencies = TRUE)
install.packages("plyr", dependencies = TRUE)
install.packages("caTools")
install.packages("ROCR")
install.packages("mice")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("caret")
install.packages("e1071")
install.packages("ggplot2")
setwd('Analytics Edge Course/4 Trees/1 Supreme Court/')
# We want to see if Justice Steven Reverses the case or not.
# Read in the data
stevens = read.csv("stevens.csv")
str(stevens)
#Reverse is out dependent variable to predict.
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse, SplitRatio = 0.7)
Train = subset(stevens, spl==TRUE)
Test = subset(stevens, spl==FALSE)
# Install rpart library
# install.packages("rpart")
library(rpart)
# install.packages("rpart.plot")
library(rpart.plot)
# CART model
StevensTree = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method="class", minbucket=25)
#Method = class tells it to make a classification tree.
# plotting tree
prp(StevensTree)
# Make predictions
PredictCART = predict(StevensTree, newdata = Test, type = "class")
table(Test$Reverse, PredictCART)
(41+71)/(41+36+22+71) # accuracy
# ROC curve
library(ROCR)
PredictROC = predict(StevensTree, newdata = Test)
PredictROC
pred = prediction(PredictROC[,2], Test$Reverse)
perf = performance(pred, "tpr", "fpr")
plot(perf)
as.numeric(performance(pred, "auc")@y.values) #AUC value
# Install randomForest package
# install.packages("randomForest")
library(randomForest)
# Build random forest model
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
# There is a warning message because there is no parameter to mention that we want to classify thus we must convert the output variable to factor type
# Convert outcome to factor
Train$Reverse = as.factor(Train$Reverse)
Test$Reverse = as.factor(Test$Reverse)
# Try again
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
# Make predictions
PredictForest = predict(StevensForest, newdata = Test)
table(Test$Reverse, PredictForest)
(40+74)/(40+37+19+74)
# Install cross-validation packages
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
library(caret)
install.packages("class")
install.packages("class")
library(caret)
install.packages("carety")
install.packages("caret")
library(caret)
install.packages("class")
install.packages("ggplot2")
library(class)
library(ggplot2)
install.packages("ggplot2")
install.packages('ggplot2', dep=TRUE, lib=NULL)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(caret)
install.packages("caret")
library(caret)
install.packages("tibble")
install.packages("pbkrtest")
install.packages("caret")
install.packages('ggplot2', dependencies = TRUE)
install.packages("Rcpp")
install.packages('data.table')
install.packages("Rcpp")
